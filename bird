stop()
var noOfDigits:Number = 1
var maxTerms:Number = 2

var birdNameArray:Array = ["eagle", "hornbill", "owl", "parrot", "pelican", "pigeon", "robin", "sparrow", "swan", "woodpecker" ]
var birdPluralArray:Array = ["eagles", "hornbills", "owls", "parrots", "pelicans", "pigeons", "robins", "sparrows", "swans", "woodpeckers" ]
var birdVarNameArray:Array = ["a", "b", "c", "d", "e", "x", "y", "z", "n", "m"]

var mStr:String = ""

var birdCountArray:Array = [0,0,0,0,0,0,0,0,0,0]

var birdOrderArray:Array = [0,1,2,3,4,5,6,7,8,9]
var exprOrderArray:Array = [0,1,2,3,4]
var exprCoeffArray:Array = [1,1,1,1,1]


var screenMCXArray:Array = new Array(5)
var screenMCYArray:Array = new Array(5)
var screenTextArray:Array = new Array(5)

for (var i:Number = 0; i <= 4; i++) {
	screenMCXArray[i] = this[birdNameArray[i] + "Set_mc"]._x
	screenMCYArray[i] = this[birdNameArray[i] + "Set_mc"]._y
	screenTextArray[i] = this["bird" + (i+1) + "_txt"]
}



var explainMCXArray:Array = new Array(5)
var explainMCYArray:Array = new Array(5)
var explainTextArray:Array = new Array(5)

for (var i:Number = 0; i <= 4; i++) {
	explainMCXArray[i] = explain_mc[birdNameArray[i] + "Explain_mc"]._x
	explainMCYArray[i] = explain_mc[birdNameArray[i] + "Explain_mc"]._y
	explainTextArray[i] = explain_mc["bird" + (i+1) + "_txt"]
}



var curQtnNo:Number = 1
var totalQtns:Number  = 0
var correctQtns:Number = 0
score_txt.text = "" + correctQtns + "/" + totalQtns


var noOfDigits_cmb_Listener:Object = new Object();
noOfDigits_cmb_Listener.change = function(event_obj:Object) {
 	noOfDigits = Number(event_obj.target.selectedItem.label)
	resetExperiment() 
}
noOfDigits_cmb.addEventListener("change", noOfDigits_cmb_Listener);


var maxTerms_cmb_Listener:Object = new Object();
maxTerms_cmb_Listener.change = function(event_obj:Object) {
 	maxTerms = Number(event_obj.target.selectedItem.label)
	resetExperiment() 
}
maxTerms_cmb.addEventListener("change", maxTerms_cmb_Listener);

var noOfTerms:Number 
var valueOfExpr:Number = 0



instructionPpt_mc.isMinimizable = true
instructionPpt_mc.isMinimized = true
instructionPpt_mc.execInstructionPpt("algebExpr_Birds_AddMult_InstrBk")




for (var i:Number = 0; i < birdNameArray.length ; i++) {
	initSet(this[birdNameArray[i] + "Set_mc"], birdNameArray[i] + "Pix_sym")
}


resetExperiment()



function resetExperiment() {
	var mStr:String = ""
	
	curQtnNo = 1
	totalQtns = 0
	correctQtns = 0
	score_txt.text = "" + correctQtns + "/" + totalQtns
	next_btn._visible = false
	
	newQuestion()
}

function newQuestion() {
	explain_mc._visible = false
	var tenFactor:Number = 1
	for (var i:Number = 1; i <= noOfDigits; i++) {
		tenFactor = tenFactor * 10
	}
	
	for (var i:Number = 0; i <birdNameArray.length; i++) {
		birdCountArray[i] = int(Math.random()*(tenFactor - 1)) + 1
		this[birdNameArray[i] + "Set_mc"]._visible = false
		this[birdNameArray[i] + "Set_mc"]._x = 0
		this[birdNameArray[i] + "Set_mc"]._y = 0

		
	}
	
	clsUtils.randomizeArray(birdOrderArray)	
	for (var i:Number = 0; i <= 4; i++) {
		showSet(this[birdNameArray[birdOrderArray[i]] + "Set_mc"], birdCountArray[birdOrderArray[i]])
		this[birdNameArray[birdOrderArray[i]] + "Set_mc"]._visible = true
		this[birdNameArray[birdOrderArray[i]] + "Set_mc"]._x = screenMCXArray[i]
		this[birdNameArray[birdOrderArray[i]] + "Set_mc"]._y = screenMCYArray[i]
		
		screenTextArray[i].text = "" + birdVarNameArray[birdOrderArray[i]] + " = " + "No. of " + birdPluralArray[birdOrderArray[i]] + " = " + birdCountArray[birdOrderArray[i]]
	}

	clsUtils.randomizeArray(exprOrderArray)
	
	qNo_txt.text = "Q. " + curQtnNo;
	OK_btn._visible = true
	correct_mc._visible = false
	wrong_mc._visible = false
	numbInput_mc.numbInput_txt.text = "0"
	numbInput_mc.numbInput_txt.type = "input"

	
	noOfTerms = int(Math.random() * (maxTerms-1)) + 2
	mStr = ""
	valueOfExpr = 0
	fillExprCoeffArray()
	for (var i:Number = 0; i <noOfTerms; i++) {
		
		if (exprCoeffArray[i] > 1) {
			mStr = mStr + exprCoeffArray[i] 
		}
		mStr = mStr + birdVarNameArray[birdOrderArray[exprOrderArray[i]]]
		
		valueOfExpr = valueOfExpr + exprCoeffArray[i]* birdCountArray[birdOrderArray[exprOrderArray[i]]]
		mStr = mStr + " + "
	}
	
	mStr = mStr.substr(0, mStr.length - 3)
	correctAnswer_txt._visible = false
	correctAnswer_txt.text = "" + valueOfExpr
	next_btn._visible = false
	explain_btn._visible = false
	qtn_txt.text = mStr
	
	
}


function initSet(my_mc:MovieClip, myLibStr:String) {
	var mRow, mCol:Number;
	var pix_mc:MovieClip 
	my_mc.pixDecoy_mc._visible = false

	for (var i:Number = 1; i <= 9; i++) {
		pix_mc = my_mc.attachMovie(myLibStr, "pix" + i + "_mc", my_mc.getNextHighestDepth() )
		mRow = int((i-1)/3)
		mCol = (i-1) - 3*mRow
		pix_mc._y = mRow*50
		pix_mc._x = mCol*50
	}
	
	for (var i:Number = 1; i <= 36; i++) {
		pix_mc = my_mc.attachMovie(myLibStr, "pixSmall" + i + "_mc", my_mc.getNextHighestDepth() )
		mRow = int((i-1)/6)
		mCol = (i-1) - 6*mRow
		pix_mc._width = 25
		pix_mc._height = 25
		pix_mc._y = mRow*25
		pix_mc._x = mCol*25
	}
	
}

function showSet(my_mc:MovieClip, myCount:Number) {
	var mRow, mCol:Number;
	var pix_mc:MovieClip 
	
	if (myCount <= 9) {
		for (var i :Number = 1; i <=9; i++) {
			my_mc["pix" + i + "_mc"]._visible = (i <= myCount)
		}
		for (var i:Number = 1; i <= 36; i++) {
			my_mc["pixSmall" + i + "_mc"]._visible = false
		}
		
		switch (myCount) {
			case 1 :
				my_mc.pix1_mc._x = 50
				my_mc.pix1_mc._y = 50
				break;
			
			case 2 :
				my_mc.pix1_mc._x = 15
				my_mc.pix1_mc._y = 50
				my_mc.pix2_mc._x = 85
				my_mc.pix2_mc._y = 50
				break;

			case 3 :
				my_mc.pix1_mc._x = 50
				my_mc.pix1_mc._y = 25
				my_mc.pix2_mc._x = 15
				my_mc.pix2_mc._y = 75
				my_mc.pix3_mc._x = 85
				my_mc.pix3_mc._y = 75
				break;
				
			case 4 :
				my_mc.pix1_mc._x = 15
				my_mc.pix1_mc._y = 25
				my_mc.pix2_mc._x = 85
				my_mc.pix2_mc._y = 25
				my_mc.pix3_mc._x = 15
				my_mc.pix3_mc._y = 75
				my_mc.pix4_mc._x = 85
				my_mc.pix4_mc._y = 75
				break;

			case 5 :
				my_mc.pix1_mc._x = 15
				my_mc.pix1_mc._y = 15
				my_mc.pix2_mc._x = 85
				my_mc.pix2_mc._y = 15
				my_mc.pix3_mc._x = 50
				my_mc.pix3_mc._y = 50
				my_mc.pix4_mc._x = 15
				my_mc.pix4_mc._y = 85
				my_mc.pix5_mc._x = 85
				my_mc.pix5_mc._y = 85
				break;

			case 6 :
				my_mc.pix1_mc._x = 10
				my_mc.pix1_mc._y = 10
				my_mc.pix2_mc._x = 90
				my_mc.pix2_mc._y = 10
				my_mc.pix3_mc._x = 25
				my_mc.pix3_mc._y = 50
				my_mc.pix4_mc._x = 75
				my_mc.pix4_mc._y = 50
				my_mc.pix5_mc._x = 10
				my_mc.pix5_mc._y = 90
				my_mc.pix6_mc._x = 90
				my_mc.pix6_mc._y = 90
				break;
				
			case 7 :
				for (var i:Number = 1; i <= 6; i++) {
					pix_mc = my_mc["pix" + i + "_mc"]
					mRow = int((i-1)/3)
					mCol = (i-1) - 3*mRow
					pix_mc._y = mRow*50
					pix_mc._x = mCol*50
				}
				my_mc.pix7_mc._x = 50
				my_mc.pix7_mc._y = 100
				break;

			case 8 :
				for (var i:Number = 1; i <= 6; i++) {
					pix_mc = my_mc["pix" + i + "_mc"]
					mRow = int((i-1)/3)
					mCol = (i-1) - 3*mRow
					pix_mc._y = mRow*50
					pix_mc._x = mCol*50
				}
				my_mc.pix7_mc._x = 0
				my_mc.pix7_mc._y = 100
				my_mc.pix8_mc._x = 100
				my_mc.pix8_mc._y = 100
				break;
			
			case 9 :
				for (var i:Number = 1; i <= 9; i++) {
					pix_mc = my_mc["pix" + i + "_mc"]
					mRow = int((i-1)/3)
					mCol = (i-1) - 3*mRow
					pix_mc._y = mRow*50
					pix_mc._x = mCol*50
				}
				break;
				
		}
	}
	else {
		for (var i :Number = 1; i <=9; i++) {
			my_mc["pix" + i + "_mc"]._visible = false
		}
		for (var i:Number = 1; i <= 36; i++) {
			my_mc["pixSmall" + i + "_mc"]._visible = true
		}
		
		
		for (var i:Number = 1; i <= 36; i++) {
			pix_mc = my_mc["pixSmall" + i + "_mc"]
			mRow = int((i-1)/6)
			mCol = (i-1) - 6*mRow
			pix_mc._width = 25
			pix_mc._height = 25
			pix_mc._y = 18 + mRow*22 + int(Math.random()*20) - 10
			pix_mc._x = 18 + mCol*22 + int(Math.random()*20) - 10
		}
	}
		
}



function fillExprCoeffArray() {
	var mNo:Number 
	
	mFlag = true
	while (mFlag) {

		for (var i:Number = 0; i <noOfTerms; i++) {
			mNo = int(Math.random() * 20) - 15
			mNo = Math.max(mNo, 1)
			exprCoeffArray[i] = mNo
		}
		
		
		for (var i:Number = 0; i < noOfTerms; i++) {
			if (exprCoeffArray[i] > 1) {
				mFlag = false
				break;
			}
		}
	}
}


reset_btn.onPress = function() {
	resetExperiment()
}



OK_btn.onPress = function() {
	OK_btn._visible = false
	next_btn._visible = true
	explain_btn._visible = true
	numbInput_mc.numbInput_txt.type = "dynamic"
	
	if (Number(numbInput_mc.numbInput_txt.text) == valueOfExpr ) {
		correctQtns++
		totalQtns++
		score_txt.text = "" + correctQtns + "/" + totalQtns

		correct_mc._visible = true
	}
	else {
		totalQtns++
		score_txt.text = "" + correctQtns + "/" + totalQtns
		
		wrong_mc._visible = true
		correctAnswer_txt._visible = true
	
	}
	
}
	


next_btn.onPress = function () {
	curQtnNo++;
	newQuestion()
}



restart_btn.onPress = function () {
	curQtnNo = 1

	next_btn._visible = false	
	totalQtns  = 0
	correctQtns = 0
	score_txt.text = "" + correctQtns + "/" + totalQtns
	newQuestion()
}


explain_btn.onPress = function() {
	var mStr:String 
	explain_mc._visible = true
	
	for (var i:Number = 0; i <birdNameArray.length; i++) {
		explain_mc[birdNameArray[i] + "Explain_mc"]._visible = false
		explain_mc[birdNameArray[i] + "Explain_mc"]._x = 0
		explain_mc[birdNameArray[i] + "Explain_mc"]._y = 0

		
	}
	
	for (var i:Number = 0; i <= 4; i++) {
		explain_mc[birdNameArray[birdOrderArray[i]] + "Explain_mc"]._visible = true
		explain_mc[birdNameArray[birdOrderArray[i]] + "Explain_mc"]._x = explainMCXArray[i]
		explain_mc[birdNameArray[birdOrderArray[i]] + "Explain_mc"]._y = explainMCYArray[i]
		
		explainTextArray[i].text = "" + birdVarNameArray[birdOrderArray[i]] + " = " + "Number of " + birdPluralArray[birdOrderArray[i]] + "= " + birdCountArray[birdOrderArray[i]]
		
	}
	
	for (var i:Number = 0; i <=4; i++) {
		if (i < noOfTerms) {
			mStr = ""
			if (exprCoeffArray[i] > 1) {
				mStr = mStr + exprCoeffArray[i]
			}
			mStr = mStr + birdVarNameArray[birdOrderArray[exprOrderArray[i]]]
			
			explain_mc["expr" + (i+1) + "_txt"].text = mStr
			
			
			mStr = ""
			if (exprCoeffArray[i] > 1) {
				mStr = mStr + exprCoeffArray[i] + " x ("
			}
			mStr = mStr + birdCountArray[birdOrderArray[exprOrderArray[i]]]
			if (exprCoeffArray[i] > 1) {
				mStr = mStr + ")"
			}
			explain_mc["val" + (i+1) + "_txt"].text = mStr
			
			explain_mc["prodVal" + (i+1) + "_txt"].text = "" + (birdCountArray[birdOrderArray[exprOrderArray[i]]] * exprCoeffArray[i])
			
			explain_mc["expr" + (i+1) + "_txt"]._visible = true
			explain_mc["val" + (i+1) + "_txt"]._visible = true
			explain_mc["prodVal" + (i+1) + "_txt"]._visible = true

			if (i > 0) {
				explain_mc["exprPlus" + (i) + "_mc"]._visible = true
				explain_mc["valPlus" + (i) + "_mc"]._visible = true
				explain_mc["prodValPlus" + (i) + "_mc"]._visible = true
				
			}
		
		}
		else {
			explain_mc["expr" + (i+1) + "_txt"]._visible = false
			explain_mc["val" + (i+1) + "_txt"]._visible = false
			explain_mc["prodVal" + (i+1) + "_txt"]._visible = false
			
			if (i > 0) {
				explain_mc["exprPlus" + (i) + "_mc"]._visible = false
				explain_mc["valPlus" + (i) + "_mc"]._visible = false
				explain_mc["prodValPlus" + (i) + "_mc"]._visible = false
				
			}
			
		}
	}
	explain_mc.answer_txt.text = valueOfExpr 
}


explain_mc.suppressor_mc.onPress = function() {
}

explain_mc.closeIcon_mc.onPress = function() {
	this._parent._visible = false
}

